<style lang="less" scoped>
page {
  background: #ffffff;
}
.user-back {
  display: flex;
  align-items: center;
  width: 100%;
  .icon {
    padding: 20rpx 0rpx;
    padding-right: 30rpx;
    font-size: 42rpx;
    font-weight: bold;
  }
  .title {
    flex-grow: 1;
    text-align: center;
    font-size: 32rpx;
    font-weight: bold;
    .des {
      font-size: 24rpx;
      color: #b2b2b2;
      font-weight: normal;
      margin-top: 6rpx;
    }
  }
}
.send-content {
  textarea {
    padding: 30rpx;
    font-size: 32rpx;
    width: 100%;
    height: 240rpx;
    box-sizing: border-box;
    color: var(--txt-content);
  }
  .placeholder {
    color: #b2b2b2;
  }
  .imags {
    padding: 30rpx;
    padding-top: 0rpx;
    .ext .weui-uploader__overview {
      display: none;
    }
  }
  .topic-input {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 30rpx;
    position: relative;
    &::after {
      content: ' ';
      position: absolute;
      left: 0;
      bottom: 0;
      right: 0;
      height: 1px;
      border-top: 0.4px solid rgba(235, 237, 245, 0.8);
      color: rgba(235, 237, 245, 0.8);
    }
    .title {
      flex-grow: 1;
      font-size: 30rpx;
      color: #409eff;
    }
    .icon-topic-full {
      font-size: 34rpx;
      color: #409eff;
      margin-right: 8rpx;
    }
    .des {
      color: #b2b2b2;
      font-size: 26rpx;
    }
    .icon {
      font-size: 34rpx;
      font-weight: bold;
    }
    .icon-arrow-right {
      color: #b2b2b2;
    }
  }
}
.tool {
  position: fixed;
  width: 100%;
  left: 0rpx;
  display: flex;
  align-items: center;
  background: #ffffff;
  transition: all 0.3s;
  &::after {
    content: ' ';
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    height: 1px;
    border-top: 0.4px solid rgba(235, 237, 245, 0.8);
    color: rgba(235, 237, 245, 0.8);
  }
  .check {
    flex-grow: 1;
    padding: 30rpx 0rpx;
    padding-left: 32rpx;
    .title {
      font-size: 26rpx;
      color: #8a8a8a;
      margin-bottom: 8rpx;
    }
    .des {
      font-size: 22rpx;
      color: #b2b2b2;
    }
  }
  .item {
    flex-grow: 1;
    padding: 30rpx 0rpx;
    text-align: center;
    position: relative;
    .icon {
      display: inline-block;
      font-size: 48rpx;
    }
    &.lock {
      .icon {
        color: #b2b2b2;
      }
    }
    &.icon-lock {
      font-size: 26rpx;
      color: #b2b2b2;
    }
    &.icon-lock::before {
      position: absolute;
      right: 22%;
      top: 8rpx;
    }
  }
  .btn {
    flex-basis: 200rpx;
    text-align: center;
    .btn-send {
      display: inline-block;
      background: #ffd100;
      color: #000;
      font-size: 30rpx;
      font-weight: bold;
      padding: 15rpx 30rpx;
      border-radius: 10rpx;
      line-height: normal;
      &::after {
        border: none;
      }
    }
    button[disabled] {
      background: #f1f1f1;
      color: #b2b2b2;
    }
  }
  .line {
    position: absolute;
    top: -70rpx;
    left: 0rpx;
    width: 100%;
    background: #ffffff;
    box-sizing: border-box;
    display: flex;
    padding: 10rpx 30rpx;
    justify-content: space-between;
    .location {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      font-size: 24rpx;
      padding: 10rpx 0rpx;
      color: #409eff;
      // border-radius: 20rpx;
      // border: #409eff solid 1px;
      .icon {
        font-size: 24rpx;
        padding: 4rpx 15rpx;
        &.icon-location,
        &.icon-topic-line {
          padding: 0rpx;
          padding-right: 6rpx;
        }
      }
      .txt {
        height: 32rpx;
        line-height: 32rpx;
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 260rpx;
        display: -webkit-box;
        -webkit-line-clamp: 1; /*设置文本行数限制*/
        -webkit-box-orient: vertical; /*设置文本排列方式*/
      }
    }
  }
}
.imags {
  display: flex;
  flex-direction: row;
  align-items: center;
  flex-wrap: wrap;
  .item {
    flex-shrink: 0;
    position: relative;
    margin-right: 30rpx;
    margin-bottom: 30rpx;
    image {
      width: 200rpx;
      height: 200rpx;
      border-radius: 10rpx;
    }
    .btn {
      position: absolute;
      font-size: 56rpx;
      top: -20rpx;
      right: -20rpx;
      color: #ffd100;
    }
    .num {
      position: absolute;
      bottom: 10rpx;
      right: 0rpx;
      padding: 6rpx 12rpx;
      font-size: 22rpx;
      color: #fff;
      background: rgba(0, 0, 0, 0.5);
      border-top-left-radius: 10rpx;
      border-bottom-right-radius: 10rpx;
    }
  }
  .item-add {
    width: 200rpx;
    height: 200rpx;
    border-radius: 10rpx;
    background: #f1f1f1;
    text-align: center;
    line-height: 200rpx;
    .icon {
      font-size: 64rpx;
      color: #b2b2b2;
    }
  }
}
</style>
<template>
  <div class="container" style="height: calc(100vh);position: relative;">
    <navigation-bar ext-class="navigation" :back="false" :show="show" background="#ffffff">
      <div slot="left" class="user-back" style="{{innerWidth}}">
        <div class="icon icon-close" @tap="onClose"></div>
        <div class="title">
          <div>发布动弹</div>
          <div class="des">{{des}}</div>
        </div>
      </div>
    </navigation-bar>
    <div class="send-content">
      <div class="topic-input" @tap.stop="onTopic">
        <div class="icon icon-topic-full"></div>
        <div class="title">{{topic ? topic.title : '选择话题'}}</div>
        <div class="des">{{topic ? '' : '选择合适的话题会有更多赞哦~'}}</div>
        <div class="icon icon-arrow-right"></div>
      </div>
      <textarea
        auto-height
        placeholder-class="placeholder"
        :show-confirm-bar="false"
        v-model="content"
        :placeholder="placeholder"
        :auto-focus="false"
        :focus="focus"
        :cursor="cursor"
        :hold-keyboard="true"
        @keyboardheightchange="onkeyboardheightchange"
        @blur="onBlur"
        @input="onInput"
        @focus="onFocus"
        :hidden="!show"
        :maxlength="500"
      />
      <div class="imags">
        <div class="item" v-for="(img,index) in images">
          <img :src="img.path" mode="aspectFill" @tap.stop="onPreview(images, index)" />
          <div class="btn icon icon-del-full" @tap.stop="onRemove(index)"></div>
          <div class="num">{{index + 1}}</div>
        </div>
        <div class="item-add" @tap="chooseImage" v-if="images.length < 9">
          <div class="icon icon-add" />
        </div>
      </div>
    </div>
    <emoji-input
      :height="boardheight"
      @emoji="onInputEmoji"
      @del="onDelEmoji"
      :hide="bottom === 0"
    />
    <topic-input :show="showTopic" @result="onSelect" @close="onTopicClose" />
    <div class="tool" style="bottom: {{bottom}}px;">
      <div class="line" v-if="location">
        <div class="location" v-if="location">
          <text class="icon icon-location" />
          <text class="txt">{{location.name}}</text>
          <text class="icon icon-del-line" @tap.stop="onDelLocation(0)" />
        </div>
        <!-- <div class="location" v-if="topic">
          <text class="icon icon-topic-line" />
          <text class="txt">{{topic.title}}</text>
          <text class="icon icon-del-line" @tap.stop="onDelLocation(1)" />
        </div>-->
      </div>
      <block v-if="isAuth">
        <div class="item" @tap.stop="chooseImage">
          <div class="icon icon-xiangji"></div>
        </div>
        <div class="item" @tap.stop="onEmoji(0)" v-if="inputType === 0">
          <div class="icon icon-emoji"></div>
        </div>
        <div class="item" @tap.stop="onEmoji(1)" v-else>
          <div class="icon icon-jianpan"></div>
        </div>
        <div class="item" @tap.stop="onMap" v-if="showMap">
          <div class="icon icon-dingwei"></div>
        </div>
        <div class="item" @tap.stop="onTopic">
          <div class="icon icon-topic"></div>
        </div>
        <!-- <div class="item lock icon icon-lock">
          <div class="icon icon-vote"></div>
        </div>-->
        <div class="btn">
          <button class="btn-send" :loading="loading" :disabled="disabled" @tap="submit">{{btntext}}</button>
        </div>
      </block>
      <block v-else>
        <div class="item icon icon-help" style="font-size: 26rpx;color: #b2b2b2;">学生认证后才可以发布动态</div>
        <div class="btn">
          <button class="btn-send" @tap="goAuth">去认证</button>
        </div>
      </block>
    </div>
  </div>
</template>
<script>
import wepy from '@wepy/core';
import { User, Post } from '../common/api';

wepy.page({
  data: {
    innerWidth: '',
    content: '',
    show: true,
    showMap: false,
    isPrivate: false,
    uplaodFile: null,
    loading: false,
    disabled: true,
    hasChoose: false,
    focus: true,
    cursor: -1,
    topic: null,
    placeholder: '记录真实的校园生活...',
    tips: null,
    btntext: '发布',
    posType: 0,
    bottom: 0,
    isGet: false,
    showTopic: false,
    des: '学生认证后才可以发布动态',
    images: [],
    choiceType: 0,
    inputType: 0, // 输入类型0文字1表情
    userId: null,
    user: null,
    isAuth: false,
    boardheight: 0,
    location: null,
    video: {
      url: null,
      width: 0,
      height: 0,
      duration: 0,
      maskHeight: 0,
      baseWidth: 0,
      baseHeight: 0,
      progress: 0,
      showMask: false
    }
  },
  async onLoad(q) {
    this.user = wx.getStorageSync('user');
    const { type, id, topicId, title } = q;
    this.posType = parseInt(type);
    this.userId = q.id;
    if (topicId) {
      this.topic = {
        id: parseInt(topicId),
        title: decodeURI(title)
      };
    }
    this.isAuth = await User.isAuth();
    if (this.isAuth) {
      if (this.posType === 1) {
        this.des = `每天最多可发布1次表白`;
      } else {
        this.des = this.user.isAuth
          ? `每天最多可发布${this.user.postDayLimit}次动弹`
          : '认证后,每天可获得5次动弹权限';
      }
    }
    let rect = wx.getMenuButtonBoundingClientRect
      ? wx.getMenuButtonBoundingClientRect()
      : null;
    this.innerWidth = rect ? 'width:' + rect.left + 'px' : '';
    const sys = wx.getSystemInfoSync();
    this.showMap = !sys.AppPlatform || sys.AppPlatform !== 'qq';
  },
  methods: {
    onClose() {
      wx.navigateBack({
        delta: 2
      });
    },
    async submit() {
      wx.hideKeyboard();
      wx.showLoading({
        title: '发布中...',
        mask: true
      });
      this.btntext = '发布中';
      this.loading = true;
      this.disabled = true;
      let mediaSrc = null;
      if (
        this.images.length > 0 ||
        this.content.length >= 10 ||
        this.video.url
      ) {
        if (this.choiceType === 2) {
          this.video.showMask = true;
          const { path, fileName } = await User.uploadVideo(
            this.video.url,
            progress => {
              this.video.progress = progress;
              this.video.maskHeight =
                this.video.height - this.video.height * (progress / 100);
            }
          );
          if (!path) {
            wx.showModal({
              title: '提示',
              content: '上传视频失败,重试.',
              showCancel: false,
              confirmText: '知道了'
            });
            this.loading = false;
            this.disabled = false;
            this.btntext = '发布';
            return;
          }
          mediaSrc = {
            fileName: fileName.toString(),
            height: this.video.baseHeight,
            width: this.video.baseWidth,
            duration: this.video.duration
          };
        }
        this.images = await Post.qiniUploadFile(this.images);
        const result = await Post.release(
          this.userId,
          this.content,
          this.images.filter((img) => {
            return img.path != null
          }),
          this.posType,
          mediaSrc,
          this.location,
          this.topic
        );
        if (result) {
          this.btntext = '已发布';
          wx.showToast({
            title: '已发布',
            icon: 'success',
            duration: 1000
          });
          const timer = setTimeout(() => {
            this.disabled = false;
            clearTimeout(timer);
            wx.navigateBack({
              delta: 2
            });
          }, 1000);
        } else {
          this.disabled = false;
          this.btntext = '发布';
        }
      } else {
        this.disabled = false;
        this.btntext = '发布';
        wx.showToast({
          title: '内容太少了',
          icon: 'none',
          duration: 2000
        });
      }
      this.loading = false;
      this.video.showMask = false;
    },
    onInput() {
      this.canSend();
    },
    async chooseImage() {
      const res = await wepy.wx.chooseImage({
        count: 9 - this.images.length,
        sizeType: ['compressed'],
        sourceType: ['album', 'camera']
      });
      const { tempFilePaths } = res;
      for (const file of tempFilePaths) {
        const info = await wepy.wx.getImageInfo({
          src: file
        });
        const { height, width, type } = info;
        this.images.push({
          height,
          width,
          type,
          isQiniu: true,
          path: file
        });
      }
      this.focus = true;
      this.canSend();
    },
    onPreview(imgs, index) {
      const urls = imgs.map(img => {
        return img.path;
      });
      wx.previewImage({
        urls,
        current: urls[index]
      });
    },
    onRemove(index) {
      this.images.splice(index, 1);
    },
    canSend() {
      if (
        this.images.length > 0 ||
        this.content.length >= 10 ||
        this.video.url
      ) {
        this.disabled = false;
      } else {
        this.disabled = true;
      }
    },
    onkeyboardheightchange(e) {
      const { height } = e.$wx.detail;
      if (!this.isGet && height > 0) {
        this.inputType = 0;
        this.bottom = height;
        this.boardheight = height;
        this.isGet = true;
      }
    },
    onFocus(res) {
      const { height } = res.$wx.detail;
      if (height) {
        this.inputType = 0;
        this.bottom = height;
        this.boardheight = height;
        this.isGet = true;
      }
    },
    onBlur(res) {
      const { cursor } = res.$wx.detail;
      this.cursor = cursor;
      if (this.inputType === 0) {
        this.bottom = 0;
      }
      this.isGet = false;
      this.focus = false;
    },
    onEmoji(type) {
      if (type === 0) {
        wx.hideKeyboard();
        this.bottom = this.boardheight;
      } else {
        this.focus = true;
      }
      this.inputType = type === 0 ? 1 : 0;
    },
    onInputEmoji(val) {
      let str = this.content.split('');
      str.splice(this.cursor, 0, val);
      this.content = str.join('');
      if (this.cursor === -1) {
        this.cursor += val.length + 1;
      } else {
        this.cursor += val.length;
      }
    },
    onDelEmoji() {
      let str = this.content.split('');
      const leftStr = this.content.substring(0, this.cursor);
      const leftLen = leftStr.length;
      const rightStr = this.content.substring(this.cursor);
      const left_left_Index = leftStr.lastIndexOf('[');
      const left_right_Index = leftStr.lastIndexOf(']');
      const right_right_Index = rightStr.indexOf(']');
      const right_left_Index = rightStr.indexOf('[');
      if (
        left_right_Index === leftLen - 1 &&
        leftLen - left_left_Index <= 8 && left_left_Index > -1
      ) {
        // "111[不简单]|23[33]"left_left_Index=3,left_right_Index=7,leftLen=8
        const len = left_right_Index - left_left_Index + 1;
        str.splice(this.cursor - len, len);
        this.cursor -= len;
      } else if (
        left_left_Index > -1 &&
        right_right_Index > -1 &&
        left_right_Index < left_left_Index &&
        right_right_Index <= 6
      ) {
        // left_left_Index:4,left_right_Index:3,right_right_Index:1,right_left_Index:2
        // "111[666][不简|单]"right_right_Index=1,left_left_Index=3,leftLen=6
        let len = right_right_Index + 1 + (leftLen - left_left_Index);
        if (len <= 10) {
          str.splice(this.cursor - (leftLen - left_left_Index), len);
          this.cursor -= leftLen - left_left_Index;
        } else {
          str.splice(this.cursor, 1);
          this.cursor -= 1;
        }
      } else {
        str.splice(this.cursor, 1);
        this.cursor -= 1;
      }
      this.content = str.join('');
    },
    onUpload() {
      this.choiceType = 1;
      this.video.url = null;
      this.hasChoose = true;
    },
    onVideoDel() {
      this.choiceType = 0;
      this.video.url = null;
      this.canSend();
    },
    async onUploadVideo() {
      const user = wx.getStorageInfoSync('user');
      if (!user || user.isAuth === 0) {
        wx.showToast({
          title: '学生认证后才可以操作',
          icon: 'none',
          duration: 2000
        });
        return;
      }
      const {
        tempFilePath,
        height,
        width,
        duration
      } = await wepy.wx.chooseVideo({
        sourceType: ['album', 'camera'],
        camera: 'back'
      });
      this.choiceType = 2;
      this.video.url = tempFilePath;
      const ratio = height > 740 ? 0.5 : 0.8;
      this.video.maskHeight = height * ratio;
      this.video.width = width * ratio;
      this.video.height = height * ratio;
      this.video.baseWidth = width;
      this.video.baseHeight = height;
      this.video.duration = duration;
      this.canSend();
    },
    onChange(e) {
      const value = e.$wx.detail.value[0] || 0;
      this.posType = parseInt(value);
    },
    goAuth() {
      wx.navigateTo({
        url: '/pages/user-school'
      });
    },
    onDelLocation(type) {
      if (type === 0) {
        this.location = null;
      } else {
        this.topic = null;
      }
    },
    onMap() {
      this.bottom = 0;
      this.inputType = 0;
      wx.hideKeyboard();
      wx.getSetting({
        success: res => {
          if (res.authSetting['scope.userLocation']) {
            this._openMap();
          } else {
            const auth = res.authSetting['scope.userLocation'];
            if (auth === undefined) {
              wx.authorize({
                scope: 'scope.userLocation',
                success: () => {
                  this._openMap();
                },
                fail() {
                  wx.showToast({
                    title: '授权后才可以打开地图',
                    icon: 'none'
                  });
                }
              });
            } else {
              wx.openSetting({
                success: res => {
                  if (res.authSetting['scope.userLocation']) {
                    this._openMap();
                  } else {
                    wx.showToast({
                      title: '授权后才可以打开地图',
                      icon: 'none'
                    });
                  }
                },
                fail: () => {
                  wx.showToast({
                    title: '授权后才可以打开地图',
                    icon: 'none'
                  });
                }
              });
            }
          }
        }
      });
    },
    _openMap() {
      wx.showLoading({
        title: '加载中'
      });
      wx.getLocation({
        altitude: true,
        isHighAccuracy: true,
        success: res => {
          const { latitude, longitude } = res;
          wx.chooseLocation({
            latitude,
            longitude,
            success: obj => {
              wx.hideLoading();
              this.location = obj;
            },
            fail: err => {
              wx.hideLoading();
            }
          });
        },
        fail: err => {
          wx.hideLoading();
          console.log(err);
        }
      });
    },
    onTopic() {
      this.show = false;
      this.bottom = 0;
      this.focus = false;
      this.showTopic = true;
    },
    onSelect(topic) {
      this.topic = topic;
      this.onTopicClose();
    },
    onTopicClose() {
      this.showTopic = false;
      this.show = true;
      this.inputType = 0;
      const time = setTimeout(() => {
        this.focus = true;
        clearTimeout(time);
      }, 300);
    }
  }
});
</script>
<config>
{
    navigationStyle: 'custom',
    "usingComponents": {
      "navigation-bar": "../components/navigation-bar/navigation-bar",
      "emoji-input": "../components/emoji-input",
      "topic-input": "../components/topic-input",
    }
}
</config>